package insanebikesteam.insanebikes;

import insanebikesteam.insanebikes.User;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator; 
import java.util.Map;
import java.net.URL;
import java.nio.charset.Charset;
import org.json.JSONException;
import org.json.JSONObject;
import org.apache.commons.io.IOUtils;
import org.kie.api.runtime.process.WorkItem;
import org.kie.api.runtime.process.WorkItemHandler;
import org.kie.api.runtime.process.WorkItemManager;
import org.jbpm.bpmn2.handler.WorkItemHandlerRuntimeException;
import java.lang.reflect.InvocationTargetException;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class LoginUserHandler implements java.io.Serializable, WorkItemHandler {

    static final long serialVersionUID = 1L;

    public LoginUserHandler() {
    }
    
    public void	abortWorkItem(WorkItem workItem, WorkItemManager manager) {}

    public void	executeWorkItem(WorkItem workItem, WorkItemManager manager) {
        
        String baseUrl = (String)workItem.getParameter("Url");
        String email = (String)workItem.getParameter("Email");
        String password = (String)workItem.getParameter("Password");
        
        String url = String.format("%1s?startAt=\"%2s\"&endAt=\"%3s\"&orderBy=\"email\"", 
                                        baseUrl, 
                                        email, 
                                        email);
                                        
        String loginStatus = "";
        User userToReturn = new User();
        
        try {
            String response = IOUtils.toString(new URL(url), (Charset) null);
            
            if(!response.equals("{}")) {
                JSONObject jsonObj = new JSONObject(response);
                Iterator<String> keys = jsonObj.keys();
                String userFirebaseKey=keys.next(); 
                
                JSONObject userJson = jsonObj.getJSONObject(userFirebaseKey);
                
                userToReturn.setFbid(userFirebaseKey);
                userToReturn.setActive(userJson.getBoolean("active"));
                userToReturn.setAddress(userJson.getString("address"));
                userToReturn.setEmail(userJson.getString("email"));
                userToReturn.setName(userJson.getString("name"));
                userToReturn.setPassword(userJson.getString("password"));
                userToReturn.setPhone(userJson.getString("phone"));
                userToReturn.setCredit(userJson.getInt("credit"));
                userToReturn.setRegistration_code(userJson.getString("registration_code"));
                userToReturn.setRegistration_code_created(new Date(userJson.getLong("registration_code_created")));
                
                if(!userToReturn.getPassword().equals(password)) {
                    userToReturn = null;
                    throw new LoginException("Invalid password!");
                } else if(!userToReturn.isActive()) {
                    throw new LoginException("User was not activated!");
                }
                
            } else {
                throw new LoginException("User does not exist.");
            }
            
        } catch (LoginException ex) {
            throw ex;
        } catch (JSONException ex) {
            System.out.println("############## Json: " + ex.getMessage());
        } catch (Exception e){
            System.out.println("############## Chyba: " + e.getMessage());
        }
        
        Map<String,Object> results = new HashMap<String,Object>();
        
        results.put("LoginStatus", loginStatus);
        results.put("LoggedUser", userToReturn);
        
        manager.completeWorkItem(workItem.getId(), results);
    }
}
